# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wSNGIVqJUbxAPXAJYng9qtOV1-3QIq_V
"""

import math


### Expressions ###
class expression:
    """Base expression class. Represents a singular variable, like x."""

    def __init__(self, name):
        """Init function.
        Args:
            Name: name of the variable, like "x."
        """
        self.name = name

    def eval(self, values):
        """Evaluation function, returns value of expression/variable given value parameters.

        Args:
            values (dict): a dicitonary of variable names:values.

        Returns:
            float representing value of variable at given evaluation.
        """
        return values[self.name]

    def diff(self, values, diffto):
        """Differentiate variable / expression with the current values.

        Args:
            values (dict): a dicitonary of variable names:values.
            diffto (string): variable with respect to which differentiation happens.

        Returns:
        """
        # TODO: Implement diff for expression (hint, think about the two cases you'll have to handle)

    # the following are all overrides: (all other subsequent classes inherit)
    def __add__(self, other):
        if isinstance(other, (int, float)):
            other = constant(other)
        return addition(self, other)


class constant(expression):
    """Constant expression class. Represents a constant value, like 2 or 3.14."""

    def __init__(self, value):
        """Init function.
        Args:
            value: numeric value of the constant.
        """
        self.value = value

    def eval(self, values):
        """Evaluation function, returns the constant value.

        Args:
            values (dict): a dicitonary of variable names:values (not used for constants).

        Returns:
            float representing the constant value.
        """
        return self.value

    def diff(self, values, diffto):
        """Differentiate constant with respect to any variable.

        Args:
            values (dict): a dicitonary of variable names:values (not used).
            diffto (string): variable with respect to which differentiation happens (not used).

        Returns:
        """
        # TODO: Implement diff for constant (hint: what's the derivative of 1 with respect to x?)
        pass


# An example class for the math library
class addition(expression):
    def __init__(self, first, second):
        """Addition of two expressions.

        Args:
            first (expression): an expression
            second (expression): another expression
        """
        self.first = first
        self.second = second

    def eval(self, values):
        return self.first.eval(values) + self.second.eval(values)

    def diff(self, values, diffto):
        return self.first.diff(values, diffto) + self.second.diff(values, diffto)


# TODO: Add additional classes derived from the expression class, e.g. subtraction, multiplication, division, and exponent

