# -*- coding: utf-8 -*-
"""week 1 solution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVRFoJgfDv2i3TSchP1-J6BgzcF5t8Bl
"""

import numpy as np
import pandas as pd
import math

# Week 1 Dataset
df = pd.read_csv('https://raw.githubusercontent.com/MichiganDataScienceTeam/f25-building-ml-models/refs/heads/main/week-1/dataset.csv')

# TODO: First view the input data using head(), then store the top 5 inputs in a np array
# Hint: List[:x] can extract the first x elements of a python list
print(df)
df.head()
inputs = np.array(df['Value'].iloc[:5])
print(inputs)

def sigmoid(x: int) -> float:
  """Sigmoid activation function."""
  # TODO: Write the activation function
  return 1 / (1 + math.exp(-x))

class Perceptron:
  """Neuron class object representing perceptron."""

  def __init__(self, num_inputs: int, weights = None) -> None:
    """Init weights and other information."""

    self.num_inputs = num_inputs

    # TODO: declare a variable to store weights similar to how num_inputs is stored
    # Define random weights in shape (1, num_inputs)

    if weights is not None:
      self.weights = weights
    else:
      self.weights = np.random.rand(1, self.num_inputs)

  def feed_forward(self, inputs: np.array) -> float:
    """Forward propogation step."""

    output = None

    # TODO: complete feed forward algorithm below
    h = np.dot(self.weights, inputs)
    output = sigmoid(h)

    return output

def main():
  """Test Perceptron class here."""

  # TODO: Declare your perceptron class below, run your feed_forward algorithm
  # BONUS: declare an array of weights to pass into your perceptron so the output of the forward pass is 0.5

  out = 0
  print(inputs)
  p = Perceptron(inputs.shape[0])
  out = p.feed_forward(inputs)

  print(f"Perceptron output after forward propagation: {out:.2f}")

  q = Perceptron(inputs.shape[0], [1,1,-2/3,-1,0])
  out = q.feed_forward(inputs)

  print(f"Perceptron output after forward propagation and custom weights: {out:.2f}")

main()

